function [v,Sim] = FindOverlap(image1,image2,pixelSize,boundary)
% INPUTS:       image1      - Feature space for reference image.
%               image2      - Feature space for neighbour image.
%               pixelSize   - A 1-2 vector representing the dimensions of
%                           the pixelation in INPUT:'image1' and
%                           INPUT:'image2'.
%               boundary    - A 1-2 vector representing the minimum
%                           proportion of each image dimension to be
%                           considered as a potential overlap.
% OUTPUTS:      v           - A 1-2 vector representing the relative
%                           position of the lower-right most pixel in
%                           INTPUT:'image2' to INPUT:'image1', which
%                           maximised similarity.
%               Sim         - Matrix of similarity measures from overlaps.
Sim = -1.*ones((size(image1)+size(image2))./pixelSize-[1,1]);
for     i = 1:size(Sim,1)
    for     j = 1:size(Sim,2)
        if      prod(([i,j]>=boundary.*...
                (size(image1)+size(image2))./pixelSize) &...
                ([i,j]<=([1,1]-boundary).*...
                (size(image1)+size(image2))./pixelSize))
            overlap1 = image1(max(pixelSize(1),...
                    (i+1)*pixelSize(1)-size(image2,1)):...
                    min(i*pixelSize(1),end),...
                    max(pixelSize(2),(j+1)*pixelSize(2)-size(image2,2)):...
                    min(j*pixelSize(2),end));
            overlap2 = image2(max(pixelSize(1),...
                    end+(1-i)*pixelSize(1)):...
                    min(end,end+size(image1,1)-i*pixelSize(1)),...
                    max(pixelSize(2),end+(1-j)*pixelSize(2)):...
                    min(end,end+size(image1,2)-j*pixelSize(2)));
            Sim(i,j) = uint32(sum(sum(overlap1.*overlap2))-...
                    sum(overlap1(overlap1~=0 & overlap2==0))-...
                    sum(overlap2(overlap2~=0 & overlap1==0)));
            %Dist(i,j) = (sum(sum(pixelDiff.^2)))^0.5*...
            %        min(numel(image1),numel(image2))/...
            %        (numel(pixelDiff));
        end
    end
end
%if      ~isempty(find(Sim==-1,1))
%    errorMessage = 'Failed to measure distance for overlap';
%    error(errorMessage);
%end
maxSimIndex = find(Sim==max(max(Sim)));
v = [mod(maxSimIndex,size(Sim,1)),ceil(maxSimIndex/size(Sim,1))].*...
        repmat(pixelSize,length(maxSimIndex),1);